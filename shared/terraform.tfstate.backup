{
  "version": 4,
  "terraform_version": "1.4.4",
  "serial": 84,
  "lineage": "380249e5-2e22-e099-b7e1-55c8a6b6d8bf",
  "outputs": {},
  "resources": [
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "elastic",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "./helm/shared-elastic",
            "cleanup_on_fail": false,
            "create_namespace": true,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "elasticsearch",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "7.17.3",
                "chart": "elasticsearch",
                "name": "elasticsearch",
                "namespace": "shared",
                "revision": 1,
                "values": "{\"antiAffinity\":\"hard\",\"antiAffinityTopologyKey\":\"kubernetes.io/hostname\",\"clusterDeprecationIndexing\":\"false\",\"clusterHealthCheckParams\":\"wait_for_status=green\\u0026timeout=60s\",\"clusterName\":\"elasticsearch\",\"enableServiceLinks\":true,\"envFrom\":[],\"esConfig\":{},\"esJavaOpts\":\"\",\"esJvmOptions\":{},\"esMajorVersion\":\"\",\"extraContainers\":[],\"extraEnvs\":[{\"name\":\"discovery.type\",\"value\":\"single-node\"},{\"name\":\"cluster.initial_master_nodes\",\"value\":null}],\"extraInitContainers\":[],\"extraVolumeMounts\":[],\"extraVolumes\":[],\"fsGroup\":\"\",\"fullnameOverride\":\"\",\"healthNameOverride\":\"\",\"hostAliases\":[],\"httpPort\":9200,\"image\":\"docker.elastic.co/elasticsearch/elasticsearch\",\"imagePullPolicy\":\"IfNotPresent\",\"imagePullSecrets\":[],\"imageTag\":\"7.17.3\",\"ingress\":{\"annotations\":{\"nginx.ingress.kubernetes.io/rewrite-target\":\"/$2\",\"nginx.ingress.kubernetes.io/use-regex\":\"true\"},\"className\":\"nginx\",\"enabled\":true,\"hosts\":[{\"host\":\"elastic.local.net\",\"paths\":[{\"path\":\"/elastic(/|$)(.*)\"}]}],\"pathtype\":\"Prefix\",\"tls\":[]},\"initResources\":{},\"keystore\":[],\"labels\":{},\"lifecycle\":{},\"masterService\":\"\",\"maxUnavailable\":1,\"minimumMasterNodes\":1,\"nameOverride\":\"\",\"networkHost\":\"0.0.0.0\",\"networkPolicy\":{\"http\":{\"enabled\":false},\"transport\":{\"enabled\":false}},\"nodeAffinity\":{},\"nodeGroup\":\"master\",\"nodeSelector\":{},\"persistence\":{\"annotations\":{},\"enabled\":false,\"labels\":{\"enabled\":false}},\"podAnnotations\":{},\"podManagementPolicy\":\"Parallel\",\"podSecurityContext\":{\"fsGroup\":1000,\"runAsUser\":1000},\"podSecurityPolicy\":{\"create\":false,\"name\":\"\",\"spec\":{\"fsGroup\":{\"rule\":\"RunAsAny\"},\"privileged\":true,\"runAsUser\":{\"rule\":\"RunAsAny\"},\"seLinux\":{\"rule\":\"RunAsAny\"},\"supplementalGroups\":{\"rule\":\"RunAsAny\"},\"volumes\":[\"secret\",\"configMap\",\"persistentVolumeClaim\",\"emptyDir\"]}},\"priorityClassName\":\"\",\"protocol\":\"http\",\"rbac\":{\"automountToken\":true,\"create\":false,\"serviceAccountAnnotations\":{},\"serviceAccountName\":\"\"},\"readinessProbe\":{\"failureThreshold\":3,\"initialDelaySeconds\":10,\"periodSeconds\":10,\"successThreshold\":3,\"timeoutSeconds\":5},\"replicas\":1,\"resources\":{\"limits\":{\"cpu\":\"1000m\",\"memory\":\"2Gi\"},\"requests\":{\"cpu\":\"1000m\",\"memory\":\"2Gi\"}},\"roles\":{\"data\":\"true\",\"ingest\":\"true\",\"master\":\"true\",\"ml\":\"true\",\"remote_cluster_client\":\"true\"},\"schedulerName\":\"\",\"secretMounts\":[],\"securityContext\":{\"capabilities\":{\"drop\":[\"ALL\"]},\"runAsNonRoot\":true,\"runAsUser\":1000},\"service\":{\"annotations\":{},\"enabled\":true,\"externalTrafficPolicy\":\"\",\"httpPortName\":\"http\",\"labels\":{},\"labelsHeadless\":{},\"loadBalancerIP\":\"\",\"loadBalancerSourceRanges\":[],\"nodePort\":\"\",\"publishNotReadyAddresses\":false,\"transportPortName\":\"transport\",\"type\":\"ClusterIP\"},\"sysctlInitContainer\":{\"enabled\":true},\"sysctlVmMaxMapCount\":262144,\"terminationGracePeriod\":120,\"tests\":{\"enabled\":false},\"tolerations\":[],\"transportPort\":9300,\"updateStrategy\":\"RollingUpdate\",\"volumeClaimTemplate\":{\"accessModes\":[\"ReadWriteOnce\"],\"resources\":{\"requests\":{\"storage\":\"1Gi\"}}}}",
                "version": "7.17.3"
              }
            ],
            "name": "elasticsearch",
            "namespace": "shared",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": null,
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [
              {
                "name": "image",
                "type": "",
                "value": "docker.elastic.co/elasticsearch/elasticsearch"
              },
              {
                "name": "imageTag",
                "type": "",
                "value": "7.17.3"
              },
              {
                "name": "ingress.hosts[0].host",
                "type": "",
                "value": "elastic.local.net"
              }
            ],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "values": [
              "---\nclusterName: \"elasticsearch\"\nnodeGroup: \"master\"\n\n# The service that non master groups will try to connect to when joining the cluster\n# This should be set to clusterName + \"-\" + nodeGroup for your master group\nmasterService: \"\"\n\n# Elasticsearch roles that will be applied to this nodeGroup\n# These will be set as environment variables. E.g. node.master=true\nroles:\n  master: \"true\"\n  ingest: \"true\"\n  data: \"true\"\n  remote_cluster_client: \"true\"\n  ml: \"true\"\n\nreplicas: 1\nminimumMasterNodes: 1\n\nesMajorVersion: \"\"\n\nclusterDeprecationIndexing: \"false\"\n\n# Allows you to add any config files in /usr/share/elasticsearch/config/\n# such as elasticsearch.yml and log4j2.properties\nesConfig: {}\n#  elasticsearch.yml: |\n#    key:\n#      nestedkey: value\n#  log4j2.properties: |\n#    key = value\n\nesJvmOptions: {}\n#  processors.options: |\n#    -XX:ActiveProcessorCount=3\n\n# Extra environment variables to append to this nodeGroup\n# This will be appended to the current 'env:' key. You can use any of the kubernetes env\n# syntax here\nextraEnvs:\n - name: discovery.type\n   value: single-node\n - name: cluster.initial_master_nodes\n   value: null\n   \n#  - name: MY_ENVIRONMENT_VAR\n#    value: the_value_goes_here\n\n# Allows you to load environment variables from kubernetes secret or config map\nenvFrom: []\n# - secretRef:\n#     name: env-secret\n# - configMapRef:\n#     name: config-map\n\n# A list of secrets and their paths to mount inside the pod\n# This is useful for mounting certificates for security and for mounting\n# the X-Pack license\nsecretMounts: []\n#  - name: elastic-certificates\n#    secretName: elastic-certificates\n#    path: /usr/share/elasticsearch/config/certs\n#    defaultMode: 0755\n\nhostAliases: []\n#- ip: \"127.0.0.1\"\n#  hostnames:\n#  - \"foo.local\"\n#  - \"bar.local\"\n\nimage: 701922941937.dkr.ecr.us-east-1.amazonaws.com/mobius-sales\nimageTag: \"shared-elasticsearch-7.17.3\"\nimagePullPolicy: \"IfNotPresent\"\n\npodAnnotations:\n  {}\n  # iam.amazonaws.com/role: es-cluster\n\n# additionals labels\nlabels: {}\n\nesJavaOpts: \"\" # example: \"-Xmx1g -Xms1g\"\n\nresources:\n  requests:\n    cpu: \"1000m\"\n    memory: \"2Gi\"\n  limits:\n    cpu: \"1000m\"\n    memory: \"2Gi\"\n\ninitResources:\n  {}\n  # limits:\n  #   cpu: \"25m\"\n  #   # memory: \"128Mi\"\n  # requests:\n  #   cpu: \"25m\"\n  #   memory: \"128Mi\"\n\nnetworkHost: \"0.0.0.0\"\n\nvolumeClaimTemplate:\n  accessModes: [\"ReadWriteOnce\"]\n  resources:\n    requests:\n      storage: 1Gi\n\nrbac:\n  create: false\n  serviceAccountAnnotations: {}\n  serviceAccountName: \"\"\n  automountToken: true\n\npodSecurityPolicy:\n  create: false\n  name: \"\"\n  spec:\n    privileged: true\n    fsGroup:\n      rule: RunAsAny\n    runAsUser:\n      rule: RunAsAny\n    seLinux:\n      rule: RunAsAny\n    supplementalGroups:\n      rule: RunAsAny\n    volumes:\n      - secret\n      - configMap\n      - persistentVolumeClaim\n      - emptyDir\n\npersistence:\n  enabled: false\n  labels:\n    # Add default labels for the volumeClaimTemplate of the StatefulSet\n    enabled: false\n  annotations: {}\n\nextraVolumes:\n  []\n  # - name: extras\n  #   emptyDir: {}\n\nextraVolumeMounts:\n  []\n  # - name: extras\n  #   mountPath: /usr/share/extras\n  #   readOnly: true\n\nextraContainers:\n  []\n  # - name: do-something\n  #   image: busybox\n  #   command: ['do', 'something']\n\nextraInitContainers:\n  []\n  # - name: do-something\n  #   image: busybox\n  #   command: ['do', 'something']\n\n# This is the PriorityClass settings as defined in\n# https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass\npriorityClassName: \"\"\n\n# By default this will make sure two pods don't end up on the same node\n# Changing this to a region would allow you to spread pods across regions\nantiAffinityTopologyKey: \"kubernetes.io/hostname\"\n\n# Hard means that by default pods will only be scheduled if there are enough nodes for them\n# and that they will never end up on the same node. Setting this to soft will do this \"best effort\"\nantiAffinity: \"hard\"\n\n# This is the node affinity settings as defined in\n# https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#node-affinity-beta-feature\nnodeAffinity: {}\n\n# The default is to deploy all pods serially. By setting this to parallel all pods are started at\n# the same time when bootstrapping the cluster\npodManagementPolicy: \"Parallel\"\n\n# The environment variables injected by service links are not used, but can lead to slow Elasticsearch boot times when\n# there are many services in the current namespace.\n# If you experience slow pod startups you probably want to set this to `false`.\nenableServiceLinks: true\n\nprotocol: http\nhttpPort: 9200\ntransportPort: 9300\n\nservice:\n  enabled: true\n  labels: {}\n  labelsHeadless: {}\n  type: ClusterIP\n  # Consider that all endpoints are considered \"ready\" even if the Pods themselves are not\n  # https://kubernetes.io/docs/reference/kubernetes-api/service-resources/service-v1/#ServiceSpec\n  publishNotReadyAddresses: false\n  nodePort: \"\"\n  annotations: {}\n  httpPortName: http\n  transportPortName: transport\n  loadBalancerIP: \"\"\n  loadBalancerSourceRanges: []\n  externalTrafficPolicy: \"\"\n\nupdateStrategy: RollingUpdate\n\n# This is the max unavailable setting for the pod disruption budget\n# The default value of 1 will make sure that kubernetes won't allow more than 1\n# of your pods to be unavailable during maintenance\nmaxUnavailable: 1\n\npodSecurityContext:\n  fsGroup: 1000\n  runAsUser: 1000\n\nsecurityContext:\n  capabilities:\n    drop:\n      - ALL\n  # readOnlyRootFilesystem: true\n  runAsNonRoot: true\n  runAsUser: 1000\n\n# How long to wait for elasticsearch to stop gracefully\nterminationGracePeriod: 120\n\nsysctlVmMaxMapCount: 262144\n\nreadinessProbe:\n  failureThreshold: 3\n  initialDelaySeconds: 10\n  periodSeconds: 10\n  successThreshold: 3\n  timeoutSeconds: 5\n\n# https://www.elastic.co/guide/en/elasticsearch/reference/7.17/cluster-health.html#request-params wait_for_status\nclusterHealthCheckParams: \"wait_for_status=green\u0026timeout=60s\"\n\n## Use an alternate scheduler.\n## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/\n##\nschedulerName: \"\"\n\nimagePullSecrets: []\nnodeSelector: {}\ntolerations: []\n\n# Enabling this will publicly expose your Elasticsearch instance.\n# Only enable this if you have security enabled on your cluster\ningress:\n  enabled: true\n  annotations:\n    nginx.ingress.kubernetes.io/use-regex: \"true\"\n    nginx.ingress.kubernetes.io/rewrite-target: /$2\n  className: \"nginx\"\n  pathtype: Prefix\n  hosts:\n    - host: a2534655bdfb1477dad77ef8098772c6-b4d79949f02533a9.elb.us-east-1.amazonaws.com\n      paths:\n        - path: /elastic(/|$)(.*)\n  tls: []\n  #  - secretName: chart-example-tls\n  #    hosts:\n  #      - chart-example.local\n\nnameOverride: \"\"\nfullnameOverride: \"\"\nhealthNameOverride: \"\"\n\nlifecycle:\n  {}\n  # preStop:\n  #   exec:\n  #     command: [\"/bin/sh\", \"-c\", \"echo Hello from the postStart handler \u003e /usr/share/message\"]\n  # postStart:\n  #   exec:\n  #     command:\n  #       - bash\n  #       - -c\n  #       - |\n  #         #!/bin/bash\n  #         # Add a template to adjust number of shards/replicas\n  #         TEMPLATE_NAME=my_template\n  #         INDEX_PATTERN=\"logstash-*\"\n  #         SHARD_COUNT=8\n  #         REPLICA_COUNT=1\n  #         ES_URL=http://localhost:9200\n  #         while [[ \"$(curl -s -o /dev/null -w '%{http_code}\\n' $ES_URL)\" != \"200\" ]]; do sleep 1; done\n  #         curl -XPUT \"$ES_URL/_template/$TEMPLATE_NAME\" -H 'Content-Type: application/json' -d'{\"index_patterns\":['\\\"\"$INDEX_PATTERN\"\\\"'],\"settings\":{\"number_of_shards\":'$SHARD_COUNT',\"number_of_replicas\":'$REPLICA_COUNT'}}'\n\nsysctlInitContainer:\n  enabled: true\n\nkeystore: []\n\nnetworkPolicy:\n  ## Enable creation of NetworkPolicy resources. Only Ingress traffic is filtered for now.\n  ## In order for a Pod to access Elasticsearch, it needs to have the following label:\n  ## {{ template \"uname\" . }}-client: \"true\"\n  ## Example for default configuration to access HTTP port:\n  ## elasticsearch-master-http-client: \"true\"\n  ## Example for default configuration to access transport port:\n  ## elasticsearch-master-transport-client: \"true\"\n\n  http:\n    enabled: false\n    ## if explicitNamespacesSelector is not set or set to {}, only client Pods being in the networkPolicy's namespace\n    ## and matching all criteria can reach the DB.\n    ## But sometimes, we want the Pods to be accessible to clients from other namespaces, in this case, we can use this\n    ## parameter to select these namespaces\n    ##\n    # explicitNamespacesSelector:\n    #   # Accept from namespaces with all those different rules (only from whitelisted Pods)\n    #   matchLabels:\n    #     role: frontend\n    #   matchExpressions:\n    #     - {key: role, operator: In, values: [frontend]}\n    ## Additional NetworkPolicy Ingress \"from\" rules to set. Note that all rules are OR-ed.\n    ##\n    # additionalRules:\n    #   - podSelector:\n    #       matchLabels:\n    #         role: frontend\n    #   - podSelector:\n    #       matchExpressions:\n    #         - key: role\n    #           operator: In\n    #           values:\n    #             - frontend\n\n  transport:\n    ## Note that all Elasticsearch Pods can talk to themselves using transport port even if enabled.\n    enabled: false\n    # explicitNamespacesSelector:\n    #   matchLabels:\n    #     role: frontend\n    #   matchExpressions:\n    #     - {key: role, operator: In, values: [frontend]}\n    # additionalRules:\n    #   - podSelector:\n    #       matchLabels:\n    #         role: frontend\n    #   - podSelector:\n    #       matchExpressions:\n    #         - key: role\n    #           operator: In\n    #           values:\n    #             - frontend\n\ntests:\n  enabled: false\n\n# Deprecated\n# please use the above podSecurityContext.fsGroup instead\nfsGroup: \"\"\n"
            ],
            "verify": false,
            "version": "7.17.3",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "kafka",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "./helm/shared-kafka",
            "cleanup_on_fail": false,
            "create_namespace": true,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "kafka",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "3.3.2-debian-11-r22",
                "chart": "shared-kafka",
                "name": "kafka",
                "namespace": "shared",
                "revision": 1,
                "values": "{\"image\":{\"repository\":\"bitnami/kafka\",\"tag\":\"3.3.2-debian-11-r22\"},\"serviceAccount\":{\"name\":\"shared-kafka\"}}",
                "version": "3.3.1"
              }
            ],
            "name": "kafka",
            "namespace": "shared",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": null,
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [
              {
                "name": "image.repository",
                "type": "",
                "value": "bitnami/kafka"
              },
              {
                "name": "image.tag",
                "type": "",
                "value": "3.3.2-debian-11-r22"
              },
              {
                "name": "serviceAccount.name",
                "type": "",
                "value": "shared-kafka"
              }
            ],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "values": null,
            "verify": false,
            "version": "3.3.1",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "postgres",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "./helm/shared-postgres",
            "cleanup_on_fail": false,
            "create_namespace": true,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "postgres",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "14.4.0",
                "chart": "postgresql",
                "name": "postgres",
                "namespace": "shared",
                "revision": 1,
                "values": "{\"global\":{\"postgresql\":{\"auth\":{\"postgresPassword\":\"postgres\"}}},\"primary\":{\"initdb\":{\"scripts\":{\"create-databases.sql\":\"CREATE ROLE \\\"mobiusserver12\\\" WITH LOGIN NOSUPERUSER NOCREATEDB NOCREATEROLE INHERIT NOREPLICATION CONNECTION LIMIT -1 PASSWORD 'postgres';\\nCREATE ROLE \\\"mobiusview12\\\" WITH LOGIN NOSUPERUSER NOCREATEDB NOCREATEROLE INHERIT NOREPLICATION CONNECTION LIMIT -1 PASSWORD 'postgres';\\nCREATE ROLE \\\"eventanalytics\\\" WITH LOGIN NOSUPERUSER NOCREATEDB NOCREATEROLE INHERIT NOREPLICATION CONNECTION LIMIT -1 PASSWORD 'postgres';\\nCREATE DATABASE \\\"mobiusserver12\\\" WITH OWNER = \\\"mobiusserver12\\\" TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = 'C' LC_CTYPE = 'C' TABLESPACE = pg_default CONNECTION LIMIT = -1;\\nCREATE DATABASE \\\"mobiusview12\\\" WITH OWNER = \\\"mobiusview12\\\" TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = 'C' LC_CTYPE = 'C' TABLESPACE = pg_default CONNECTION LIMIT = -1;\\nCREATE DATABASE \\\"eventanalytics\\\" WITH OWNER = \\\"eventanalytics\\\" TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = 'C' LC_CTYPE = 'C' TABLESPACE = pg_default CONNECTION LIMIT = -1;\\n\"}}}}",
                "version": "11.6.16"
              }
            ],
            "name": "postgres",
            "namespace": "shared",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": null,
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [
              {
                "name": "global.postgresql.auth.postgresPassword",
                "type": "",
                "value": "postgres"
              },
              {
                "name": "primary.initdb.scripts.create-databases\\.sql",
                "type": "",
                "value": "CREATE ROLE \"mobiusserver12\" WITH LOGIN NOSUPERUSER NOCREATEDB NOCREATEROLE INHERIT NOREPLICATION CONNECTION LIMIT -1 PASSWORD 'postgres';\nCREATE ROLE \"mobiusview12\" WITH LOGIN NOSUPERUSER NOCREATEDB NOCREATEROLE INHERIT NOREPLICATION CONNECTION LIMIT -1 PASSWORD 'postgres';\nCREATE ROLE \"eventanalytics\" WITH LOGIN NOSUPERUSER NOCREATEDB NOCREATEROLE INHERIT NOREPLICATION CONNECTION LIMIT -1 PASSWORD 'postgres';\nCREATE DATABASE \"mobiusserver12\" WITH OWNER = \"mobiusserver12\" TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = 'C' LC_CTYPE = 'C' TABLESPACE = pg_default CONNECTION LIMIT = -1;\nCREATE DATABASE \"mobiusview12\" WITH OWNER = \"mobiusview12\" TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = 'C' LC_CTYPE = 'C' TABLESPACE = pg_default CONNECTION LIMIT = -1;\nCREATE DATABASE \"eventanalytics\" WITH OWNER = \"eventanalytics\" TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = 'C' LC_CTYPE = 'C' TABLESPACE = pg_default CONNECTION LIMIT = -1;\n"
              }
            ],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "values": null,
            "verify": false,
            "version": "11.6.16",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_secret",
      "name": "postgres",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "binary_data": null,
            "data": {
              "postgres-password": "cG9zdGdyZXM="
            },
            "id": "default/postgres-secrets",
            "immutable": false,
            "metadata": [
              {
                "annotations": {},
                "generate_name": "",
                "generation": 0,
                "labels": {},
                "name": "postgres-secrets",
                "namespace": "default",
                "resource_version": "650",
                "uid": "16a557e9-b73d-418a-949d-bbac07c81d06"
              }
            ],
            "timeouts": null,
            "type": "Opaque",
            "wait_for_service_account_token": true
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMH19"
        }
      ]
    }
  ],
  "check_results": null
}

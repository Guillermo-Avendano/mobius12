{
  "version": 4,
  "terraform_version": "1.4.4",
  "serial": 188,
  "lineage": "380249e5-2e22-e099-b7e1-55c8a6b6d8bf",
  "outputs": {},
  "resources": [
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "elastic",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "./helm/shared-elastic",
            "cleanup_on_fail": false,
            "create_namespace": true,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "elasticsearch",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "7.17.3",
                "chart": "elasticsearch",
                "name": "elasticsearch",
                "namespace": "shared",
                "revision": 1,
                "values": "{\"antiAffinity\":\"hard\",\"antiAffinityTopologyKey\":\"kubernetes.io/hostname\",\"clusterDeprecationIndexing\":\"false\",\"clusterHealthCheckParams\":\"wait_for_status=green\\u0026timeout=60s\",\"clusterName\":\"elasticsearch\",\"enableServiceLinks\":true,\"envFrom\":[],\"esConfig\":{},\"esJavaOpts\":\"\",\"esJvmOptions\":{},\"esMajorVersion\":\"\",\"extraContainers\":[],\"extraEnvs\":[{\"name\":\"discovery.type\",\"value\":\"single-node\"},{\"name\":\"cluster.initial_master_nodes\",\"value\":null}],\"extraInitContainers\":[],\"extraVolumeMounts\":[],\"extraVolumes\":[],\"fsGroup\":\"\",\"fullnameOverride\":\"\",\"healthNameOverride\":\"\",\"hostAliases\":[],\"httpPort\":9200,\"image\":\"docker.elastic.co/elasticsearch/elasticsearch\",\"imagePullPolicy\":\"IfNotPresent\",\"imagePullSecrets\":[],\"imageTag\":\"7.17.3\",\"ingress\":{\"annotations\":{\"nginx.ingress.kubernetes.io/rewrite-target\":\"/$2\",\"nginx.ingress.kubernetes.io/use-regex\":\"true\"},\"className\":\"nginx\",\"enabled\":true,\"hosts\":[{\"host\":\"elastic.local.net\",\"paths\":[{\"path\":\"/elastic(/|$)(.*)\"}]}],\"pathtype\":\"Prefix\",\"tls\":[]},\"initResources\":{},\"keystore\":[],\"labels\":{},\"lifecycle\":{},\"masterService\":\"\",\"maxUnavailable\":1,\"minimumMasterNodes\":1,\"nameOverride\":\"\",\"networkHost\":\"0.0.0.0\",\"networkPolicy\":{\"http\":{\"enabled\":false},\"transport\":{\"enabled\":false}},\"nodeAffinity\":{},\"nodeGroup\":\"master\",\"nodeSelector\":{},\"persistence\":{\"annotations\":{},\"enabled\":false,\"labels\":{\"enabled\":false}},\"podAnnotations\":{},\"podManagementPolicy\":\"Parallel\",\"podSecurityContext\":{\"fsGroup\":1000,\"runAsUser\":1000},\"podSecurityPolicy\":{\"create\":false,\"name\":\"\",\"spec\":{\"fsGroup\":{\"rule\":\"RunAsAny\"},\"privileged\":true,\"runAsUser\":{\"rule\":\"RunAsAny\"},\"seLinux\":{\"rule\":\"RunAsAny\"},\"supplementalGroups\":{\"rule\":\"RunAsAny\"},\"volumes\":[\"secret\",\"configMap\",\"persistentVolumeClaim\",\"emptyDir\"]}},\"priorityClassName\":\"\",\"protocol\":\"http\",\"rbac\":{\"automountToken\":true,\"create\":false,\"serviceAccountAnnotations\":{},\"serviceAccountName\":\"\"},\"readinessProbe\":{\"failureThreshold\":3,\"initialDelaySeconds\":10,\"periodSeconds\":10,\"successThreshold\":3,\"timeoutSeconds\":5},\"replicas\":1,\"resources\":{\"limits\":{\"cpu\":\"1000m\",\"memory\":\"2Gi\"},\"requests\":{\"cpu\":\"1000m\",\"memory\":\"2Gi\"}},\"roles\":{\"data\":\"true\",\"ingest\":\"true\",\"master\":\"true\",\"ml\":\"true\",\"remote_cluster_client\":\"true\"},\"schedulerName\":\"\",\"secretMounts\":[],\"securityContext\":{\"capabilities\":{\"drop\":[\"ALL\"]},\"runAsNonRoot\":true,\"runAsUser\":1000},\"service\":{\"annotations\":{},\"enabled\":true,\"externalTrafficPolicy\":\"\",\"httpPortName\":\"http\",\"labels\":{},\"labelsHeadless\":{},\"loadBalancerIP\":\"\",\"loadBalancerSourceRanges\":[],\"nodePort\":\"\",\"publishNotReadyAddresses\":false,\"transportPortName\":\"transport\",\"type\":\"ClusterIP\"},\"sysctlInitContainer\":{\"enabled\":true},\"sysctlVmMaxMapCount\":262144,\"terminationGracePeriod\":120,\"tests\":{\"enabled\":false},\"tolerations\":[],\"transportPort\":9300,\"updateStrategy\":\"RollingUpdate\",\"volumeClaimTemplate\":{\"accessModes\":[\"ReadWriteOnce\"],\"resources\":{\"requests\":{\"storage\":\"1Gi\"}}}}",
                "version": "7.17.3"
              }
            ],
            "name": "elasticsearch",
            "namespace": "shared",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": null,
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [
              {
                "name": "image",
                "type": "",
                "value": "docker.elastic.co/elasticsearch/elasticsearch"
              },
              {
                "name": "imageTag",
                "type": "",
                "value": "7.17.3"
              },
              {
                "name": "ingress.hosts[0].host",
                "type": "",
                "value": "elastic.local.net"
              }
            ],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "values": [
              "---\r\nclusterName: \"elasticsearch\"\r\nnodeGroup: \"master\"\r\n\r\n# The service that non master groups will try to connect to when joining the cluster\r\n# This should be set to clusterName + \"-\" + nodeGroup for your master group\r\nmasterService: \"\"\r\n\r\n# Elasticsearch roles that will be applied to this nodeGroup\r\n# These will be set as environment variables. E.g. node.master=true\r\nroles:\r\n  master: \"true\"\r\n  ingest: \"true\"\r\n  data: \"true\"\r\n  remote_cluster_client: \"true\"\r\n  ml: \"true\"\r\n\r\nreplicas: 1\r\nminimumMasterNodes: 1\r\n\r\nesMajorVersion: \"\"\r\n\r\nclusterDeprecationIndexing: \"false\"\r\n\r\n# Allows you to add any config files in /usr/share/elasticsearch/config/\r\n# such as elasticsearch.yml and log4j2.properties\r\nesConfig: {}\r\n#  elasticsearch.yml: |\r\n#    key:\r\n#      nestedkey: value\r\n#  log4j2.properties: |\r\n#    key = value\r\n\r\nesJvmOptions: {}\r\n#  processors.options: |\r\n#    -XX:ActiveProcessorCount=3\r\n\r\n# Extra environment variables to append to this nodeGroup\r\n# This will be appended to the current 'env:' key. You can use any of the kubernetes env\r\n# syntax here\r\nextraEnvs:\r\n - name: discovery.type\r\n   value: single-node\r\n - name: cluster.initial_master_nodes\r\n   value: null\r\n   \r\n#  - name: MY_ENVIRONMENT_VAR\r\n#    value: the_value_goes_here\r\n\r\n# Allows you to load environment variables from kubernetes secret or config map\r\nenvFrom: []\r\n# - secretRef:\r\n#     name: env-secret\r\n# - configMapRef:\r\n#     name: config-map\r\n\r\n# A list of secrets and their paths to mount inside the pod\r\n# This is useful for mounting certificates for security and for mounting\r\n# the X-Pack license\r\nsecretMounts: []\r\n#  - name: elastic-certificates\r\n#    secretName: elastic-certificates\r\n#    path: /usr/share/elasticsearch/config/certs\r\n#    defaultMode: 0755\r\n\r\nhostAliases: []\r\n#- ip: \"127.0.0.1\"\r\n#  hostnames:\r\n#  - \"foo.local\"\r\n#  - \"bar.local\"\r\n\r\nimage: 701922941937.dkr.ecr.us-east-1.amazonaws.com/mobius-sales\r\nimageTag: \"shared-elasticsearch-7.17.3\"\r\nimagePullPolicy: \"IfNotPresent\"\r\n\r\npodAnnotations:\r\n  {}\r\n  # iam.amazonaws.com/role: es-cluster\r\n\r\n# additionals labels\r\nlabels: {}\r\n\r\nesJavaOpts: \"\" # example: \"-Xmx1g -Xms1g\"\r\n\r\nresources:\r\n  requests:\r\n    cpu: \"1000m\"\r\n    memory: \"2Gi\"\r\n  limits:\r\n    cpu: \"1000m\"\r\n    memory: \"2Gi\"\r\n\r\ninitResources:\r\n  {}\r\n  # limits:\r\n  #   cpu: \"25m\"\r\n  #   # memory: \"128Mi\"\r\n  # requests:\r\n  #   cpu: \"25m\"\r\n  #   memory: \"128Mi\"\r\n\r\nnetworkHost: \"0.0.0.0\"\r\n\r\nvolumeClaimTemplate:\r\n  accessModes: [\"ReadWriteOnce\"]\r\n  resources:\r\n    requests:\r\n      storage: 1Gi\r\n\r\nrbac:\r\n  create: false\r\n  serviceAccountAnnotations: {}\r\n  serviceAccountName: \"\"\r\n  automountToken: true\r\n\r\npodSecurityPolicy:\r\n  create: false\r\n  name: \"\"\r\n  spec:\r\n    privileged: true\r\n    fsGroup:\r\n      rule: RunAsAny\r\n    runAsUser:\r\n      rule: RunAsAny\r\n    seLinux:\r\n      rule: RunAsAny\r\n    supplementalGroups:\r\n      rule: RunAsAny\r\n    volumes:\r\n      - secret\r\n      - configMap\r\n      - persistentVolumeClaim\r\n      - emptyDir\r\n\r\npersistence:\r\n  enabled: false\r\n  labels:\r\n    # Add default labels for the volumeClaimTemplate of the StatefulSet\r\n    enabled: false\r\n  annotations: {}\r\n\r\nextraVolumes:\r\n  []\r\n  # - name: extras\r\n  #   emptyDir: {}\r\n\r\nextraVolumeMounts:\r\n  []\r\n  # - name: extras\r\n  #   mountPath: /usr/share/extras\r\n  #   readOnly: true\r\n\r\nextraContainers:\r\n  []\r\n  # - name: do-something\r\n  #   image: busybox\r\n  #   command: ['do', 'something']\r\n\r\nextraInitContainers:\r\n  []\r\n  # - name: do-something\r\n  #   image: busybox\r\n  #   command: ['do', 'something']\r\n\r\n# This is the PriorityClass settings as defined in\r\n# https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass\r\npriorityClassName: \"\"\r\n\r\n# By default this will make sure two pods don't end up on the same node\r\n# Changing this to a region would allow you to spread pods across regions\r\nantiAffinityTopologyKey: \"kubernetes.io/hostname\"\r\n\r\n# Hard means that by default pods will only be scheduled if there are enough nodes for them\r\n# and that they will never end up on the same node. Setting this to soft will do this \"best effort\"\r\nantiAffinity: \"hard\"\r\n\r\n# This is the node affinity settings as defined in\r\n# https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#node-affinity-beta-feature\r\nnodeAffinity: {}\r\n\r\n# The default is to deploy all pods serially. By setting this to parallel all pods are started at\r\n# the same time when bootstrapping the cluster\r\npodManagementPolicy: \"Parallel\"\r\n\r\n# The environment variables injected by service links are not used, but can lead to slow Elasticsearch boot times when\r\n# there are many services in the current namespace.\r\n# If you experience slow pod startups you probably want to set this to `false`.\r\nenableServiceLinks: true\r\n\r\nprotocol: http\r\nhttpPort: 9200\r\ntransportPort: 9300\r\n\r\nservice:\r\n  enabled: true\r\n  labels: {}\r\n  labelsHeadless: {}\r\n  type: ClusterIP\r\n  # Consider that all endpoints are considered \"ready\" even if the Pods themselves are not\r\n  # https://kubernetes.io/docs/reference/kubernetes-api/service-resources/service-v1/#ServiceSpec\r\n  publishNotReadyAddresses: false\r\n  nodePort: \"\"\r\n  annotations: {}\r\n  httpPortName: http\r\n  transportPortName: transport\r\n  loadBalancerIP: \"\"\r\n  loadBalancerSourceRanges: []\r\n  externalTrafficPolicy: \"\"\r\n\r\nupdateStrategy: RollingUpdate\r\n\r\n# This is the max unavailable setting for the pod disruption budget\r\n# The default value of 1 will make sure that kubernetes won't allow more than 1\r\n# of your pods to be unavailable during maintenance\r\nmaxUnavailable: 1\r\n\r\npodSecurityContext:\r\n  fsGroup: 1000\r\n  runAsUser: 1000\r\n\r\nsecurityContext:\r\n  capabilities:\r\n    drop:\r\n      - ALL\r\n  # readOnlyRootFilesystem: true\r\n  runAsNonRoot: true\r\n  runAsUser: 1000\r\n\r\n# How long to wait for elasticsearch to stop gracefully\r\nterminationGracePeriod: 120\r\n\r\nsysctlVmMaxMapCount: 262144\r\n\r\nreadinessProbe:\r\n  failureThreshold: 3\r\n  initialDelaySeconds: 10\r\n  periodSeconds: 10\r\n  successThreshold: 3\r\n  timeoutSeconds: 5\r\n\r\n# https://www.elastic.co/guide/en/elasticsearch/reference/7.17/cluster-health.html#request-params wait_for_status\r\nclusterHealthCheckParams: \"wait_for_status=green\u0026timeout=60s\"\r\n\r\n## Use an alternate scheduler.\r\n## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/\r\n##\r\nschedulerName: \"\"\r\n\r\nimagePullSecrets: []\r\nnodeSelector: {}\r\ntolerations: []\r\n\r\n# Enabling this will publicly expose your Elasticsearch instance.\r\n# Only enable this if you have security enabled on your cluster\r\ningress:\r\n  enabled: true\r\n  annotations:\r\n    nginx.ingress.kubernetes.io/use-regex: \"true\"\r\n    nginx.ingress.kubernetes.io/rewrite-target: /$2\r\n  className: \"nginx\"\r\n  pathtype: Prefix\r\n  hosts:\r\n    - host: a2534655bdfb1477dad77ef8098772c6-b4d79949f02533a9.elb.us-east-1.amazonaws.com\r\n      paths:\r\n        - path: /elastic(/|$)(.*)\r\n  tls: []\r\n  #  - secretName: chart-example-tls\r\n  #    hosts:\r\n  #      - chart-example.local\r\n\r\nnameOverride: \"\"\r\nfullnameOverride: \"\"\r\nhealthNameOverride: \"\"\r\n\r\nlifecycle:\r\n  {}\r\n  # preStop:\r\n  #   exec:\r\n  #     command: [\"/bin/sh\", \"-c\", \"echo Hello from the postStart handler \u003e /usr/share/message\"]\r\n  # postStart:\r\n  #   exec:\r\n  #     command:\r\n  #       - bash\r\n  #       - -c\r\n  #       - |\r\n  #         #!/bin/bash\r\n  #         # Add a template to adjust number of shards/replicas\r\n  #         TEMPLATE_NAME=my_template\r\n  #         INDEX_PATTERN=\"logstash-*\"\r\n  #         SHARD_COUNT=8\r\n  #         REPLICA_COUNT=1\r\n  #         ES_URL=http://localhost:9200\r\n  #         while [[ \"$(curl -s -o /dev/null -w '%{http_code}\\n' $ES_URL)\" != \"200\" ]]; do sleep 1; done\r\n  #         curl -XPUT \"$ES_URL/_template/$TEMPLATE_NAME\" -H 'Content-Type: application/json' -d'{\"index_patterns\":['\\\"\"$INDEX_PATTERN\"\\\"'],\"settings\":{\"number_of_shards\":'$SHARD_COUNT',\"number_of_replicas\":'$REPLICA_COUNT'}}'\r\n\r\nsysctlInitContainer:\r\n  enabled: true\r\n\r\nkeystore: []\r\n\r\nnetworkPolicy:\r\n  ## Enable creation of NetworkPolicy resources. Only Ingress traffic is filtered for now.\r\n  ## In order for a Pod to access Elasticsearch, it needs to have the following label:\r\n  ## {{ template \"uname\" . }}-client: \"true\"\r\n  ## Example for default configuration to access HTTP port:\r\n  ## elasticsearch-master-http-client: \"true\"\r\n  ## Example for default configuration to access transport port:\r\n  ## elasticsearch-master-transport-client: \"true\"\r\n\r\n  http:\r\n    enabled: false\r\n    ## if explicitNamespacesSelector is not set or set to {}, only client Pods being in the networkPolicy's namespace\r\n    ## and matching all criteria can reach the DB.\r\n    ## But sometimes, we want the Pods to be accessible to clients from other namespaces, in this case, we can use this\r\n    ## parameter to select these namespaces\r\n    ##\r\n    # explicitNamespacesSelector:\r\n    #   # Accept from namespaces with all those different rules (only from whitelisted Pods)\r\n    #   matchLabels:\r\n    #     role: frontend\r\n    #   matchExpressions:\r\n    #     - {key: role, operator: In, values: [frontend]}\r\n    ## Additional NetworkPolicy Ingress \"from\" rules to set. Note that all rules are OR-ed.\r\n    ##\r\n    # additionalRules:\r\n    #   - podSelector:\r\n    #       matchLabels:\r\n    #         role: frontend\r\n    #   - podSelector:\r\n    #       matchExpressions:\r\n    #         - key: role\r\n    #           operator: In\r\n    #           values:\r\n    #             - frontend\r\n\r\n  transport:\r\n    ## Note that all Elasticsearch Pods can talk to themselves using transport port even if enabled.\r\n    enabled: false\r\n    # explicitNamespacesSelector:\r\n    #   matchLabels:\r\n    #     role: frontend\r\n    #   matchExpressions:\r\n    #     - {key: role, operator: In, values: [frontend]}\r\n    # additionalRules:\r\n    #   - podSelector:\r\n    #       matchLabels:\r\n    #         role: frontend\r\n    #   - podSelector:\r\n    #       matchExpressions:\r\n    #         - key: role\r\n    #           operator: In\r\n    #           values:\r\n    #             - frontend\r\n\r\ntests:\r\n  enabled: false\r\n\r\n# Deprecated\r\n# please use the above podSecurityContext.fsGroup instead\r\nfsGroup: \"\"\r\n"
            ],
            "verify": false,
            "version": "7.17.3",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "kafka",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "./helm/shared-kafka",
            "cleanup_on_fail": false,
            "create_namespace": true,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "kafka",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "3.3.2-debian-11-r22",
                "chart": "shared-kafka",
                "name": "kafka",
                "namespace": "shared",
                "revision": 1,
                "values": "{\"image\":{\"repository\":\"bitnami/kafka\",\"tag\":\"3.3.2-debian-11-r22\"},\"serviceAccount\":{\"name\":\"shared-kafka\"}}",
                "version": "3.3.1"
              }
            ],
            "name": "kafka",
            "namespace": "shared",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": null,
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [
              {
                "name": "image.repository",
                "type": "",
                "value": "bitnami/kafka"
              },
              {
                "name": "image.tag",
                "type": "",
                "value": "3.3.2-debian-11-r22"
              },
              {
                "name": "serviceAccount.name",
                "type": "",
                "value": "shared-kafka"
              }
            ],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "values": null,
            "verify": false,
            "version": "3.3.1",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "pgadmin",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "./helm/shared-pgadmin4",
            "cleanup_on_fail": false,
            "create_namespace": true,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "pgadmin",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "6.21",
                "chart": "pgadmin4",
                "name": "pgadmin",
                "namespace": "shared",
                "revision": 1,
                "values": "{\"image\":{\"repository\":\"dpage/pgadmin4\",\"tag\":\"latest\"},\"namespace\":\"shared\"}",
                "version": "1.0.0"
              }
            ],
            "name": "pgadmin",
            "namespace": "shared",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": null,
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [
              {
                "name": "image.repository",
                "type": "",
                "value": "dpage/pgadmin4"
              },
              {
                "name": "image.tag",
                "type": "",
                "value": "latest"
              },
              {
                "name": "namespace",
                "type": "",
                "value": "shared"
              }
            ],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "values": null,
            "verify": false,
            "version": "1.0.0",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "postgres",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "./helm/shared-postgres",
            "cleanup_on_fail": false,
            "create_namespace": true,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "postgres",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "14.4.0",
                "chart": "postgresql",
                "name": "postgres",
                "namespace": "shared",
                "revision": 1,
                "values": "{\"global\":{\"postgresql\":{\"auth\":{\"existingSecret\":\"postgres-secrets\",\"secretKeys\":{\"adminPasswordKey\":\"postgres-password\"}}}},\"primary\":{\"initdb\":{\"scripts\":{\"create-databases.sql\":\"CREATE ROLE \\\"mobiusserver12\\\" WITH LOGIN NOSUPERUSER NOCREATEDB NOCREATEROLE INHERIT NOREPLICATION CONNECTION LIMIT -1 PASSWORD 'postgres';\\r\\nCREATE ROLE \\\"mobiusview12\\\" WITH LOGIN NOSUPERUSER NOCREATEDB NOCREATEROLE INHERIT NOREPLICATION CONNECTION LIMIT -1 PASSWORD 'postgres';\\r\\nCREATE ROLE \\\"eventanalytics\\\" WITH LOGIN NOSUPERUSER NOCREATEDB NOCREATEROLE INHERIT NOREPLICATION CONNECTION LIMIT -1 PASSWORD 'postgres';\\r\\nCREATE DATABASE \\\"mobiusserver12\\\" WITH OWNER = \\\"mobiusserver12\\\" TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = 'C' LC_CTYPE = 'C' TABLESPACE = pg_default CONNECTION LIMIT = -1;\\r\\nCREATE DATABASE \\\"mobiusview12\\\" WITH OWNER = \\\"mobiusview12\\\" TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = 'C' LC_CTYPE = 'C' TABLESPACE = pg_default CONNECTION LIMIT = -1;\\r\\nCREATE DATABASE \\\"eventanalytics\\\" WITH OWNER = \\\"eventanalytics\\\" TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = 'C' LC_CTYPE = 'C' TABLESPACE = pg_default CONNECTION LIMIT = -1;\\r\\n\"}}}}",
                "version": "11.6.16"
              }
            ],
            "name": "postgres",
            "namespace": "shared",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": null,
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [
              {
                "name": "global.postgresql.auth.existingSecret",
                "type": "",
                "value": "postgres-secrets"
              },
              {
                "name": "global.postgresql.auth.secretKeys.adminPasswordKey",
                "type": "",
                "value": "postgres-password"
              },
              {
                "name": "primary.initdb.scripts.create-databases\\.sql",
                "type": "",
                "value": "CREATE ROLE \"mobiusserver12\" WITH LOGIN NOSUPERUSER NOCREATEDB NOCREATEROLE INHERIT NOREPLICATION CONNECTION LIMIT -1 PASSWORD 'postgres';\r\nCREATE ROLE \"mobiusview12\" WITH LOGIN NOSUPERUSER NOCREATEDB NOCREATEROLE INHERIT NOREPLICATION CONNECTION LIMIT -1 PASSWORD 'postgres';\r\nCREATE ROLE \"eventanalytics\" WITH LOGIN NOSUPERUSER NOCREATEDB NOCREATEROLE INHERIT NOREPLICATION CONNECTION LIMIT -1 PASSWORD 'postgres';\r\nCREATE DATABASE \"mobiusserver12\" WITH OWNER = \"mobiusserver12\" TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = 'C' LC_CTYPE = 'C' TABLESPACE = pg_default CONNECTION LIMIT = -1;\r\nCREATE DATABASE \"mobiusview12\" WITH OWNER = \"mobiusview12\" TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = 'C' LC_CTYPE = 'C' TABLESPACE = pg_default CONNECTION LIMIT = -1;\r\nCREATE DATABASE \"eventanalytics\" WITH OWNER = \"eventanalytics\" TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = 'C' LC_CTYPE = 'C' TABLESPACE = pg_default CONNECTION LIMIT = -1;\r\n"
              }
            ],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "values": null,
            "verify": false,
            "version": "11.6.16",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "kubernetes_namespace.shared",
            "kubernetes_secret.postgres"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_namespace",
      "name": "shared",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "shared",
            "metadata": [
              {
                "annotations": {
                  "name": "shared"
                },
                "generate_name": "",
                "generation": 0,
                "labels": {
                  "mylabel": "shared"
                },
                "name": "shared",
                "resource_version": "6612",
                "uid": "f01e4ed0-9c92-4310-b82c-2ff7e56f1926"
              }
            ],
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjozMDAwMDAwMDAwMDB9fQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_secret",
      "name": "postgres",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "binary_data": null,
            "data": {
              "postgres-password": "postgres"
            },
            "id": "shared/postgres-secrets",
            "immutable": false,
            "metadata": [
              {
                "annotations": null,
                "generate_name": "",
                "generation": 0,
                "labels": null,
                "name": "postgres-secrets",
                "namespace": "shared",
                "resource_version": "6615",
                "uid": "914d781d-3662-41c1-870f-5b08e22d974d"
              }
            ],
            "timeouts": null,
            "type": "Opaque",
            "wait_for_service_account_token": true
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMH19",
          "dependencies": [
            "kubernetes_namespace.shared"
          ]
        }
      ]
    }
  ],
  "check_results": null
}

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "shared-kafka.fullname" . }}
  labels:
    {{- include "shared-kafka.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "shared-kafka.selectorLabels" . | nindent 6 }}
  serviceName: {{ include "shared-kafka.fullname" . }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "shared-kafka.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: ALLOW_PLAINTEXT_LISTENER
              value: "{{ .Values.kafka.allowPlainTextListener }}"
            - name: KAFKA_CFG_BROKER_ID
              value: "{{ .Values.kafka.cfg.brokerID }}"
            - name: KAFKA_CFG_CONTROLLER_LISTENER_NAMES
              value: {{ .Values.kafka.cfg.controller.ListenerNames }}
            - name: KAFKA_CFG_CONTROLLER_QUORUM_VOTERS
              value: {{ .Values.kafka.cfg.controller.quorumVoters }}
            - name: KAFKA_CFG_LISTENERS
              value: {{ .Values.kafka.cfg.listeners }}
            - name: KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP
              value: {{ .Values.kafka.cfg.listenerSecurityProtocolMap }}
            - name: KAFKA_CFG_NODE_ID
              value: "{{ .Values.kafka.cfg.nodeID }}"
            - name: KAFKA_CFG_PROCESS_ROLES
              value: {{ .Values.kafka.cfg.processRoles }}
            - name: KAFKA_ENABLE_KRAFT
              value: "{{ .Values.kafka.enableKraft }}"
            - name: KAFKA_CFG_DELETE_TOPIC_ENABLE
              value: "{{ .Values.kafka.cfg.topics.deleteEnable }}"
            - name: KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE
              value: "{{ .Values.kafka.cfg.topics.autoCreateEnable }}"
            - name: KAFKA_HEAP_OPTS
              value: {{ .Values.kafka.heapOpts }}
          ports:
            - name: {{ .Values.service.name }}
              containerPort: {{ .Values.service.targetPort }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: /
              port: http
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: /
              port: http
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

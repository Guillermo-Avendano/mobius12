#Default values for mobiusview.
#This is a YAML-formatted file.
#Declare variables to be passed into your templates.

#replicaCount is the number of replicas required for this service
replicaCount: 1
#namespace is the place for the service to run
namespace: mobius-sales
#storageClassName used in Kubernetes cluster
storageClassName: efs-sc-dynamic

image:
  #repository is the docker registory to pull docker images
  repository: 701922941937.dkr.ecr.us-east-1.amazonaws.com/mobius-sales
  #tag is the docker image tag(it may be latest or 9.1)
  tag: mobius-view-12.0.0
  #pullPolicy is the policy to pull images
  pullPolicy: IfNotPresent
  #pullSecret is the authentication based image pull from registry
  pullSecret: dockerlocal

#tags_environment: "zenith-dev"
#aws_region: us-east-1

#nameOverride is the name of the service to publish with  
nameOverride: ""
#fullnameOverride is the full name of the service to publish with
fullnameOverride: ""
#allowForwardedUri is added for the WOPI - Office Integration to work on kube | default = true
allowForwardedUri: true

service:
  #name is the name of the port
  type: ClusterIP
  #name is the name of the port
  port: 8080

ports:
  #name is the name of the port
  name: http
  #containerPort is the port where container should run     
  containerPort: 8080
  #targetPort is the port where the service points to
  targetPort: 8080
  #protocol is the name of the protocol
  protocol: TCP 

livenessProbe:
  #enabled is the flag to indicate whether liveness probe check is required or not
  enabled: false
  #path is the http path that will be used to perform the liveness check, the port defined as the containerPort will be
  #used in the request.
  path: "/mobius/actuator/health"
  #header is the header to be passed along with the http request.
  header:
    name: "Accept"
    value: "application/vnd.spring-boot.actuator.v3+json"
  #initialDelaySeconds is the number of seconds delayed for liveness probes to get initiated
  initialDelaySeconds: 200
  #periodSeconds is the measure of frequency to perform the liveness probe
  periodSeconds: 10
  #timeoutSeconds is the number of seconds after which the liveness probe times out
  timeoutSeconds: 30
  #failureThreshold determines the number of times a failure must occur before it will restart the pod.
  failureThreshold: 25

readinessProbe:
  #enabled is the flag to indicate whether readiness probe check is required or not
  enabled: false
  #path is the http path that will be used to perform the readiness check, the port defined as the containerPort will be
  #used in the request.
  path: "/mobius/actuator/health"
  #header is the header to be passed along with the http request.
  header:
    name: "Accept"
    value: "application/vnd.spring-boot.actuator.v3+json"
  #initialDelaySeconds is the number of seconds delayed for readiness probes to get initiated
  initialDelaySeconds: 200
  #periodSeconds is the measure of frequency to perform the Readiness probe
  periodSeconds: 10
  #timeoutSeconds is the number of seconds after which the Readiness probe times out
  timeoutSeconds: 30
  #failureThreshold determines the number of times a failure must occur before it will stop trying
  failureThreshold: 25
  
master:
  persistence:
    #enabled is the flag to indicate whether persistence claim is required or not
    enabled: true
    #volumeName used in this claim
    volumeName: pvc-5cff041a-8a63-4ff9-ad64-1db404b1adf5
    #claimName used in this claim
    claimName: pvc-mobiusview12-storage
    #accessMode is the access specified to claim from persistence volume
    accessMode: ReadWriteMany
    #size is the storage claimed from persistence volume
    size: 1Gi

  mobiusViewDiagnostics:
    persistentVolume:
      #enabled is the flag to indicate whether persistence claim is required for mobius diagnostics reports or not
      enabled: true
      #volumeName used in this claim
      volumeName: pvc-105adb5d-37d9-4479-9564-d4284f45c7ab
      #claimName is the name of the claim created by the user, which will be bound to the mapped persistence volume
      claimName: pvc-mobiusview12-diagnostics
      #accessMode is the access specified to claim from persistence volume
      accessMode: ReadWriteMany
      #size is the storage claimed from persistence volume
      size: 1Gi

    #In auto scaling environment then the lifetime of the containers depends on the
    #system load, if the system load is more then new containers will be created and if the load is reduced the
    #containers will be deleted, even after the containers are removed , the logs are still available in the shared
    #directory, there is a internal job that takes cate of removing the orphan logs.

    #If the container is idle for 2 days then the logs folder will be removed
    #If you want to handle the log deletion manually don't configure unusedLogPurgeInMinutes
    unusedLogPurgeInMinutes: 2880
    #After server start up the job will run only after 12 hours
    initialDelayInMs: "43200000"
    #Delay between each run , the default value is 1 hour
    fixedDelayInMs: "3600000"
  
  presentations:
    persistentVolume:
      #enabled is the flag to indicate whether presentation persistence claim is required or not    
      enabled: true
      #volumeName used in this claim
      volumeName: pvc-1a69892b-5375-484d-ad85-08ae80cb6d03    
      #claimName is the name of the claim created by the user, which will be bound to the mapped persistence volume
      claimName: pvc-mobiusview12-presentation
      #accessMode is the access specified to claim from persistence volume
      accessMode: ReadWriteMany
      #size is the storage claimed from persistence volume
      size: 10Gi

#resources is the CPU/Memory resource requests/limits	
resources: {}
  #We usually recommend not to specify default resources and to leave this as a conscious
  #choice for the user. This also increases chances charts run on environments with little
  #resources, such as Minikube. If you do want to specify resources, uncomment the following
  #lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  #limits:
  #cpu: 100m
  #memory: 128Mi
  #requests:
  #cpu: 100m
  #memory: 128Mi

#nodeSelector is the node labels for pod assignment
nodeSelector: {}
#tolerations is the toleration labels for pod assignment
tolerations: []
#affinity is the node affinity
affinity: {}


datasource:
  #If value for the below "databaseConnectivitySecretName" is specified, "url", "username" and "password" will be fetched from the corresponding secret keys.
  #If value for "databaseConnectivitySecretName" is not specifed, "url", "username" and "password" values will be mapped from the below corresponding key-value pairs
  #Uncomment the below 'databaseConnectivitySecretName' and provide value for fetching corresponding secret keys.
  databaseConnectivitySecretName: mobiusview-server-secrets
  #Key for fetching "url" value from  the secret
  databaseUrlSecretValue: url
  #url is the db endpoint with port number and schema name where the database connectivity will be established. This "url" value will be used if value for "databaseConnectivitySecretName" is not specified.
  #url: jdbc:postgresql://postgres-postgresql:5432/mobius_tenant1

  #Key for fetching username value from  the secret
  databaseUsernameSecretValue: username
  #username is the admin account for the Database, used when creating new DB schemas. This "username" value will be used if value for "databaseConnectivitySecretName" is not specified.
  #username: mobius_tenant1

  #Key for fetching password value from the secret
  databasePasswordSecretValue: password
  #password is the admin account password for the Database, used when creating new DB schemas. This "password" value will be used if value for "databaseConnectivitySecretName" is not specified.
  #password: mobius_123
  
  #driverClassName is the database drive class name
  driverClassName: org.postgresql.Driver
  hikari:
    autoCommit: false

jpa:
  #databasePlatform is the jpa database platform
  databasePlatform: org.hibernate.dialect.PostgreSQL9Dialect
  hibernate:
    #ddlAuto is the ddl auto commit status of JPA
    ddlAuto: none

#Use authentication type = COGNITO if you are using cognito for authentication.
authentication:
  type: STANDARD
  
defaultSSOKey: "ADASDFASDFXGGEG25585"

java:
  opts: ""

asg:
  bootstrap:
    mobiusAdministratorUser: mobiusadmin
    search:
      resultCache:
        #enables/disables search results cache.
        enabled: true
        #max items stored in cache.
        maxSize: 5000
        #The maximum number of seconds for each entry to stay in the cache. Entries that are older than timeToLive will
        #be automatically evicted from the cache. Updates on the entry do not change the eviction time.
        #Any integer between 0 and Integer.MAX_VALUE. 0 means infinite.
        timeToLive: 3600
        #Maximum number of seconds for each entry to stay idle in the cache. Entries that are idle(not touched) for
        #more than idleTime will get automatically evicted from the cache. Entry is touched if get, getAll, put or
        #containsKey is called. Any integer between 0 and Integer.MAX_VALUE. 0 means infinite.
        idleTime: 1800
  audit:
    kafka:
      topic: "audit"
      
      #Enable the keystore section if  mutual TLS  is used between broker
      #and mobiusview and there is a need to supply custom keystore.
      #A secret need to be created with below required details and applied
      #to the cluster. 
      #The secretName is name of secret contains keystore details like
      #the keystore content, keystore password and key password. 
      #Create a secret with three key items -  keystorePassword,keyPassword
      #and name of the keystore file like audit.keystore.p12. The values of 
      #the key are keystore password, key password and contents of keystore.
      #All values must be base 64 encoded . 
      #For example, the data section of the secret looks like
      #keystorePassword: Y2hhbmdlaXQK
      #keyPassword: Y2hhbmdlaXQK
      #audit.keystore.p12: MIIQEQIBAzCCD8oGCSqGSIb3DQEH== 
         
      #keystore:
      #  secretName: audit-keystore-secret
      #  name: audit.keystore.p12
     
      #Enable the truststore section if you  TLS / mTLS  is used between    
      #broker and mobiusview and there is a need to supply custom 
      #trusted certificate.
      #A secret need to be created with below required details and applied
      #to the cluster.
      #The secretName is name of secret contains truststore details like
      #the trusted certificate content. 
      #Create a secret with one key item - 
      #name of the trusted certificate file like RootCA.crt. The value of 
      #the key is content of trusted certificate.
      #All values must be base 64 encoded . 
      #For example, the datasection of the secret looks like
      #RootCA.crt: ASDDFIBAzCCD8oGCSqGSIb3DQEH== 
      
      #truststore:
        #secretName: audit-truststore-secret
        #certificateName: RootCA.crt
      
  #Workflow 2.0 portal endpoints to integrate with mobius ui.
  #this is a configuration needed to expose the APIs of Workflow/externalmappings
  external-mapping:
    type: restserver
  workflow:
    #processContextRoot contains Host and port zenith deployment
    #processContextRoot: https://localhost:443
    #processUrlPath is relative End point to get the list of of process definitions in prs system
    #processUrlPath: /zenith/prs/adminrest/process-definitions
    #inboxUrlPath is Relative path for inbox static page
    #inboxUrlPath: /portal/inbox
    #processNotificationsUrlPath is relative path for getting inbox notifications
    #processNotificationsUrlPath: /prs/rest/processnotifications

  email:
    type: embedded
    link:
      host: "http://localhost:8080"
    smtpconfig:
      fromAddress: admin@asg.com
      fromAddressReadonly: true
      replyToAddress: admin@asg.com
      replyToAddressReadonly: true
      linkText: Click here to open
      smtpAddress: smtp.asg.com
      smtpPort: 25
      smtpProtocol:
      smtpAuthenticationRequired: false
      smtpUser: admin
      smtpPasswd:
      autoGenerateEmail: true
      emailDomainAddress: asg.com
      copySmtpConfigFromGlobal: true
  iamDirectory:
    enabled: false
  clustering:
    #Port exposing is always required, even when there is just one node, you can either specify a single port of a range (in the example if the first port is busy, the next one will be chosen, that is a preferred way)
    port: 6701-6800
    kubernetes:
      enabled: false
      #URL of Kubernetes Master; https://kubernetes.default.svc by default
      #kubernetesMaster: https://kubernetes.default.svc
      #If set to true, it checks also the addresses of PODs which are not ready
      #resolveNotReadyAddressed: true
      #Kubernetes Namespace where Hazelcast is running; if not specified, the value is taken from the environment variables KUBERNETES_NAMESPACE or OPENSHIFT_BUILD_NAMESPACE
      namespace: mobius-sales
      #Service name used to scan only PODs connected to the given service; if not specified, then all PODs in the namespace are checked
      serviceName: mobiusview
      #Service label and value used to tag services that should form the Hazelcast cluster together
      #serviceLabelName:
      #serviceLabelValue:
      #API Token to Kubernetes API; if not specified, the value is taken from the file /var/run/secrets/kubernetes.io/serviceaccount/token
      #apiToken: /var/run/secrets/kubernetes.io/serviceaccount/token
  metrics:
    type: embedded
    tracker:
      enabled: false
      cacheTime: 60000
      databaseTime: 120000
      #change the below value to configure the data retention period of metrics(in days)
      dataRetentionPeriod: 15
    scheduler:
      enabled: false
      jobTime: 180000
  vendor:
    type: NONE
  cognito:
    enableAWSCognitoAuth: false
    clientId: "63r5id4m4kisa123"
    appWebDomain: "mobius.auth.us-east-1.amazoncognito.com"
    tokenScopesArray:
      - "openid"
      - "profile"
      - "http://asgportal/api.fullaccess"
    redirectUriSignIn: "https://localhost:8080/mobius"
    redirectUriSignOut: "https://login.microsoftonline.com/common/oauth2/v2.0/logout"
    identityProvider: "admin"
    userPoolId: "Pool Id"
    advancedSecurityDataCollectionFlag: "false"
  authorization:
    type: restserver
    username: mobiusadmin
    enabled: true
    group: true
    tenant: _
    registerTenant: true
    assignAdministrator: true
  security:
    basicauth:
      username: "admin"
      password: "admin"
      groups: "mobiusadmin"
    enabled: false
    #The defaultTenant will be picked when uncommented. The enabled flag is considered for defaultTenant.
    #defaultTenant: ""
    urlPatterns: "/rest/*,/adminrest/*,/directconnect/*,/cmis/*"
    openidConnect:
      server:
        enabled: false
      inbound: true
      outbound: true
      urlPatterns: "/rest/*,/adminrest/*,/directconnect/*,/cmis/*"
      idpProvider: external
      claimsMapping:
        username: displayName
        groups: "[].displayName"
      identityService:
        enabled: false
        profile: "http://identity-asg-identity-service.shared/api/Users/profile"
        groups: "http://identity-asg-identity-service.shared/api/Users/groups"
      client:
        jwkUrl: "http://auth.host.com:8080/auth/realms/myrealm/protocol/openid-connect/certs"
    openidConnectTwo:
      enabled: false
      type: "identity"
      validate: true
      iamGroups: true
      outbound: true
      client:
        jwkbase: "http://asg-idp-service:8080/auth/realms"
      mapping:
        username: "preferred_username"
        userid:  "zenith-user-id"
        tenantname: "zenith-tenant-code"
        tenantid: "zenith-tenant-id"
        groups: "groups"
      serviceTokenSettings:
        oidcConfig:
          serviceTokenUrl: "http://asg-idp-service:8080/auth/realms/master/protocol/openid-connect/token"
          tenantCode: "_"
          serviceTokens:
            - name: "mobiusview"
              clientId: "zenith-mobius-view-s2s"
              clientSecret: "<client_secret>"
              scopes: ["authorization.registration.application"]
          generateTokens:
            - urlPatterns: ["/authorization/*"]
              name: "mobiusview"
    oidc:
      npm:
        oidcconfig:
          issuer: "http://asg-idp-service:8080/auth/realms/master"
          redirecturi: ""
          clientid: ""
          responsetype: "code"
          scope: "openid profile email zenith-api"
          logouturl: "http://asg-idp-service:8080/auth/realms/master/protocol/openid-connect/logout"
          keycloak: true

logging:
    pattern:
      console: "%d %-5level %logger : %msg%n"
      file: "%d{yyyy-MM-dd HH:mm:ss,SSS}  %-5level [%thread] - (%logger{36}) - %msg%n"
    level:
      org:
        springframework: ERROR
        hibernate: ERROR
        glassfish: ERROR

#Placeholder to add env variables . Add any required value in below format in 
#your values.yml file
#extraEnv: { VARIABLENAME1: VARIABLEVALUE1 , VARIABLENAME2: VARIABLEVALUE2 }
extraEnv: {}

spring:
  #Enable Kafka section to enable auditing to kafka. Configure the topic
  #in audit.kafka section  
  kafka:
    security:
      protocol: PLAINTEXT
    bootstrap:
      servers: shared-kafka:9092
    producer:
      acks: all
      properties:
        enable:
          idempotence: true        
    
  cloud:
    discovery:
      client:
        simple:
          instances:
            metrics:
               uri: http://localhost:9500
            asgdirservice:
               uri: http://asg-directory-service:8080
            authorization:
               uri: http://asg-authorization-common:8080
            audit:
               uri: http://eventanalytics:8500

matomo:
    enabled: false

initRepository:
  enabled: true
  host: "mobius"
  port: "8080"
  documentServer: "vdrnetds"
  defaultSSOKey: "ADASDFASDFXGGEG25585"
  logLevel: "ERROR"
  java:
    opts: ""
#Define mobius server admin credentials
  mobius:
    server:
      user: "ADMIN"
      #password: 

#Define ingress rules to be deployed on the EKS cluster
#Certificate must be loaded into the LoadBalancer
#Internal traffic should be non SSL
ingress:
  enabled: true
  className: "nginx"
  annotations: 
    nginx.ingress.kubernetes.io/rewrite-target: /mobius$1
    nginx.ingress.kubernetes.io/proxy-body-size: "32m"
    nginx.ingress.kubernetes.io/affinity: "cookie"
    nginx.ingress.kubernetes.io/session-cookie-name: "session-cookie"
    nginx.ingress.kubernetes.io/session-cookie-expires: "172800"
    nginx.ingress.kubernetes.io/session-cookie-max-age: "172800"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/affinity-mode: "persistent"
    nginx.ingress.kubernetes.io/session-cookie-change-on-failure: "false"
    nginx.ingress.kubernetes.io/session-cookie-hash: sha1
    nginx.ingress.kubernetes.io/session-cookie-path: /mobius
    nginx.ingress.kubernetes.io/proxy-buffer-size: "8k"
  hosts:
    - host: a2534655bdfb1477dad77ef8098772c6-b4d79949f02533a9.elb.us-east-1.amazonaws.com
      paths:
        - path: /mobius(.*)$
          pathType: ImplementationSpecific
  #tls:
  #  - hosts:
  #    - a2534655bdfb1477dad77ef8098772c6-b4d79949f02533a9.elb.us-east-1.amazonaws.com
  #    secretName: "tls-mobiusview"        
